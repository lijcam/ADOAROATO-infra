# ./defaults.env
#
# Default configuration, and shared functions for the Azure DevOps automation.

DEFAULT_AZURE_DEVOPS_PROJECT="Team Tailspin"
DEFAULT_AZURE_DEVOPS_ORGANIZATION="https://dev.azure.com/ADOAROATO/"


typeset -A SOURCE_GIT_REPOS
SOURCE_GIT_REPOS[tailspin-tekton-ci]="https://github.com/lijcam/mslearn-tailspin-spacegame-web-kubernetes.git"
SOURCE_GIT_REPOS[tailspin-azurepipeline-ci]="https://github.com/lijcam/tailspin-azurepipeline-ci.git"
SOURCE_GIT_REPOS[tailspin-production]="https://github.com/lijcam/ADOAROATO-infra"

AZURE_DEVOPS_PROJECT="${1:-$DEFAULT_AZURE_DEVOPS_PROJECT}"
AZURE_DEVOPS_ORGANIZATION="${2:-$DEFAULT_AZURE_DEVOPS_ORGANIZATION}"

DEPENDENCIES=(
  az
  jq
)

# Shared Functions

#######################################
# Check the shell path for required commands.
# Globals:
#   DEPENDENCIES
# Arguments:
#   None
#######################################
check_dependencies() {

  typeset -a not_installed
  local return_code=0

  # Use the which commands to quickly search the users $PATH for commands.
  for dependency in "${(@)DEPENDENCIES}"; do
    if ! which $dependency &> /dev/null; then
      not_installed+=($dependency)
      return_code=1
    fi
  done

  # Fail the function if a dependency is missing.
  if (( $return_code != 0 )); then
    echo "Script dependencies are not found in the shell path, please install: $not_installed."
  fi

  return $return_code

}

#######################################
# Creates an Azure DevOps project.
# Globals:
#   AZURE_DEVOPS_ORGANIZATION
#   AZURE_DEVOPS_PROJECT
# Arguments:
#   None
#######################################
create_devops_project() {

  az devops project create \
    --organization $AZURE_DEVOPS_ORGANIZATION \
    --name $AZURE_DEVOPS_PROJECT

}

#######################################
# Get the ID of an Azure DevOps project.
# Globals:
#   AZURE_DEVOPS_ORGANIZATION
#   AZURE_DEVOPS_PROJECT
# Outputs:
#   Writes ID to stdout
#######################################
get_devops_project_id() {

  local ID=$(az devops project show \
    --organization $AZURE_DEVOPS_ORGANIZATION \
    --project $AZURE_DEVOPS_PROJECT \
      | jq -r .id)

  echo $ID

}

#######################################
# Delete an Azure DevOps project.
# Globals:
#   AZURE_DEVOPS_ORGANIZATION
# Arguments:
#   None
#######################################
delete_devops_project() {

  local PROJECT_ID=$(get_devops_project_id)
  
  az devops project delete --yes \
    --organization $AZURE_DEVOPS_ORGANIZATION \
    --id $PROJECT_ID

}

#######################################
# Create a repository inside a Azure DevOps project.
# Globals:
#   AZURE_DEVOPS_ORGANIZATION
#   AZURE_DEVOPS_PROJECT
# Arguments:
#   Name of the project.
#######################################
create_devops_repo() {

  az repos create \
    --organization $AZURE_DEVOPS_ORGANIZATION \
    --project $AZURE_DEVOPS_PROJECT \
    --name "$1"

}

#######################################
# Import existing project into Azure DevOps repository.
# Globals:
#   AZURE_DEVOPS_ORGANIZATION
#   AZURE_DEVOPS_PROJECT
# Arguments:
#   Name of repository.
#   Git clone HTTP path.
#######################################
import_git_repo() {
    
  az repos import create \
    --organization $AZURE_DEVOPS_ORGANIZATION \
    --project $AZURE_DEVOPS_PROJECT \
    --repository "$1" \
    --git-url "$2" 

}
